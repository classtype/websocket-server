//--------------------------------------------------------------------------------------------------

$.SocketConnect = $.extend(
    
/*--------------------------------------------------------------------------------------------------
|
| -> Свойства
|
|-------------------------------------------------------------------------------------------------*/

    {private: {ids: 1}},// Счетчик ID соединений
    {private: {connects: {}}},// Список соединений
    {private: {users: {}}},// Список юзеров
    
/*--------------------------------------------------------------------------------------------------
|
| -> Возвращает экземпляр соединения
|
|-------------------------------------------------------------------------------------------------*/

    {public: {getConnect: function(id) {
        return this.connects[id] || new $.Client();
    }}},
    
/*--------------------------------------------------------------------------------------------------
|
| -> Возвращает юзера по UserID
|
|-------------------------------------------------------------------------------------------------*/

    {public: {getUser: function(userid) {
        return this.users[userid] || {};
    }}},
    
/*--------------------------------------------------------------------------------------------------
|
| -> Привязывает UserID к текущему соединению
|
|-------------------------------------------------------------------------------------------------*/

    {private: {addUserID: function(id) {
    // Получаем UserID
        var userid = this.getConnect(id).getUserID();
        
    // Проверяем наличие списка
        if (!(userid in this.users)) {
        // Создаем новый список
            this.users[userid] = {};
        }
        
    // Добавляем в список ID соединения
        this.users[userid][id] = id;
    }}},
    
/*--------------------------------------------------------------------------------------------------
|
| -> Отвязывает UserID от текущего соединения
|
|-------------------------------------------------------------------------------------------------*/

    {private: {removeUserID: function(id) {
    // Получаем UserID
        var userid = this.getConnect(id).getUserID();
        
    // Проверяем наличие списка
        if (userid in this.users) {
        // Удвляем из списка ID соединения
            delete this.users[userid][id];
            
        // Удаляем сам список если в нем больше нет соединений
            if (Object.keys(this.users[userid]).length == 0) {
                delete this.users[userid];
            }
        }
    }}},
    
/*--------------------------------------------------------------------------------------------------
|
| -> Создает новое соединение
|
|-------------------------------------------------------------------------------------------------*/

    {public: {create: function(ws, onAccess) {
    // Указатель
        var t = this;
        
    // Генерируем новый ID
        var id = t.ids++;
        
    // Добавляем соединение в список
        t.connects[id] = new $.SocketClient(id, ws);
        
    // Сообщение с сокета
        ws.on('message', function(json) {
        // Конвертируем из JSON
            try {
                var r = JSON.parse(json);
            } catch(e) {
                return t.getConnect(id).error('Некорректный запрос: ' + json);
            }
            
        // Проверяем наличие заголовка
            if (typeof r[0] != 'string') {
                return t.getConnect(id).error('Не найден заголовок запроса: ' + json);
            }
            
        // Проверяем наличие тела запроса
            if (typeof r[1] != 'object') {
                return t.getConnect(id).error('Не найдено тело запроса: ' + json);
            }
            
        // Записываем в консоль
            $.SocketConsole['->'](r[0], ($.Socket.isConsole == 'body' ? JSON.stringify(r[1]) : json));
            
        // Запрос на авторизацию
            if (r[0] == 'Access') {
            // Создаем список аргументов
                var args = [
                // OnError
                    function(error_msg) {
                        t.getConnect(id).error(error_msg||'Внимание! Ошибка авторизации. Перезагрузите страницу.');
                    },
                    
                // OnComplete
                    function(userid, data) {
                    // Задаем UserID
                        t.getConnect(id).setUserID(userid);
                        
                    // Юзер НЕ прошел авторизацию
                        if (!t.getConnect(id).getUserID()) {
                        // Отправляем сообщение об ошибке
                            t.getConnect(id).error('Внимание! Ошибка авторизации. Перезагрузите страницу.');
                        }
                        
                    // Юзер прошел авторизацию
                        else {
                        // Задаем информацию о юзере
                            t.getConnect(id).setData(data);
                            
                        // Привязываем UserID к текущему соединению
                            t.addUserID(id);
                            
                        // Отправляем сообщение об успешной авторизации
                            t.getConnect(id).send('Access');
                        }
                    }
                ];
                
            // Добавляем полученные данные в список аргументов
                for (var i = 0; i < r[1].length; i++) {
                    args.push(r[1][i]);
                }
                
            // Проверяем авторизацию
                onAccess.apply(t.getConnect(id), args);
                
            // Выходим 
                return;
            }
            
        // Проверяем авторизацию
            if (!t.getConnect(id).getUserID()) {
            // Отправляем сообщение об ошибке
                return t.getConnect(id).error('Внимание! Ошибка авторизации. Перезагрузите страницу.');
            }
            
        // Запускаем обработчик события
            $.Socket.emit(r[0], t.getConnect(id), r[1]);
        });
        
    // Сокет закрыл соединение
        ws.on('close', function() {
        // Отвязываем UserID от текущего соединения
            t.removeUserID(id);
            
        // Удаляем соединение из списка
            delete t.connects[id];
            
        // Записываем в консоль
            $.SocketConsole['<-']('Exit ID', id);
        });
        
    // Записываем в консоль
        $.SocketConsole['->']('Join ID', id);
    }}}
);

//--------------------------------------------------------------------------------------------------